type Name {
  fi: String
  en: String
  sv: String
  jp: String
  es: String
}

type Description {
  fi: String
  en: String
  sv: String
  jp: String
  es: String
}


type Location {
  lat: Float!
  lon: Float!
  streetAddress: String
  postalCode: String
  city: String
  country: String
}


















type Event @model @auth(rules: [{allow: owner},  
 {allow: groups, groups: ["Admin"]},  
 {allow: groups, groups: ["DefaultUser"], operations: [read]},
 {allow: public, provider: iam operations: [read]}]) {
  id: ID!
  type: String! @index(name: "eventByDates", queryField: "byStartingDateTime", sortKeyFields: ["startingDateTime"])
  startingDateTime: AWSDateTime! 
  endingDateTime: AWSDateTime!
  location: Location!
  category: [CATEGORY!] 
  company: Company 
  mainPicture: AWSURL
  secondaryPictures: [AWSURL]
  description: Description!
  name: Name!
  Links: Links
  ageRestriction: String
  isFree: Boolean
  Ticket: [Ticket] @hasMany
  FeedBack: [EventFeedback] @hasMany
    owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])
}

type Activity @model @auth(rules: [{allow: owner},  
 {allow: groups, groups: ["DefaultUser"], operations: [read]},
 {allow: groups, groups: ["Admin"]},
 {allow: public, provider: iam operations: [read]}]) {
  id: ID!
  name: Name!
  description: Description!
  company: Company
  categories: [CATEGORY!] 
  Location: Location!
  mainPicture: AWSURL
  secondaryPictures: [AWSURL]
  Links: Links
  OpenDays: [OpenDays!]
  ageRestriction: String
  Ticket: [Ticket] @hasMany
  isFree: Boolean
  FeedBack: [ActivityFeedback] @hasMany
    owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])
}

type Company @model @auth(rules: [{allow: owner},  
{allow: groups, groups: ["Admin"]}, 
 {allow: groups, groups: ["DefaultUser"], operations: [read]},
 {allow: public, provider: iam operations: [read]}]) {
  id: ID! 
  email: String
  description: Description
  logo: String
  categories: [CATEGORY]
  phone: String
  name: String
  links: Links
  events: [Event] @hasMany
  activities: [Activity] @hasMany
    owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])
}

type Ticket @model @auth(rules: [{allow: owner},  
{allow: groups, groups: ["Admin"]}, 
 {allow: groups, groups: ["DefaultUser"], operations: [read]},
 {allow: public, provider: iam operations: [read]}]) {
    name: Name
    price: Float
    currency: String
    description: Description
    available: Boolean
    startSaleDate: AWSDateTime
    endSaleDate: AWSDateTime
    Offers: [Offer] @hasMany
      owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])
}




type Offer @model @auth(rules: [{allow: owner},  
{allow: groups, groups: ["Admin"]}, 
 {allow: groups, groups: ["DefaultUser"], operations: [read]},
 {allow: public, provider: iam operations: [read]}]) {
  id: ID!
  name: Name
  description: Description
  type: OfferType
  creditCost: Int!
  price: Float
  currency: String
  discount: Float 
  bundleSize: Int 
    owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])
}

enum OfferType {
  DISCOUNT
  BUNDLE
  GIFT
}

type User @model @auth(rules: [{allow: owner},  
{allow: groups, groups: ["Admin"]}, 
 {allow: groups, groups: ["DefaultUser"], operations: [read]},
 {allow: public, provider: iam operations: [read]}]) {
  id: ID!
  name: String!
  email: String! 
  profilePicture: AWSURL
  birthday: AWSDate
  favouriteEvents: [Event] @hasMany
  favouriteActivities: [Activity] @hasMany
  favouriteCompanies: [Company] @hasMany
  preferences: [CATEGORY]
  credits: Int
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])
}


enum FriendshipStatus {
  REQUESTED
  ACCEPTED
  DECLINED
}



type Links {
  mainURL: AWSURL
  secondaryURL: AWSURL
  storeURL: AWSURL
    facebookURL: AWSURL
    twitterURL: AWSURL
    instagramURL: AWSURL
    youtubeURL: AWSURL
}

enum CATEGORY {
  MUSIC
  FESTIVAL
  EXPO
  SPORT
  MOTORSPORTS
  GAMES
  NIGHTLIFE
  FOODDRINKS
  TECHNOLOGY
  TRIP

  CONCERT
  STANDUP
  FAMILY
  HEALTH
  
  WORKSHOP
  EDUCATION
  BUSINESS

  PERFORMANCE
  MUSEUM

  NATURE
  SCIENCE

  BOARDGAMES
  VIDEOGAMES
  GAMBLING
  OTHER
}



type OpenDays {
  day: Int
  timeFrom: AWSTime
  timeTo: AWSTime
}


type ActivityFeedback @model @auth(rules: [{allow: owner},  
{allow: groups, groups: ["Admin"]}, 
 {allow: groups, groups: ["DefaultUser"], operations: [read]},
 {allow: public, provider: iam operations: [read]}]) {
  id: ID!
    rating: Int!
  user: User!
  activity: Activity!
  comment: String
  createdAt: String!
    owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])
}

type EventFeedback @model @auth(rules: [{allow: owner},  
{allow: groups, groups: ["Admin"]}, 
 {allow: groups, groups: ["DefaultUser"], operations: [read]},
 {allow: public, provider: iam operations: [read]}]) {
  id: ID!
    rating: Int!
  user: User!
  event: Event!
  comment: String
  createdAt: String!
    owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])
}