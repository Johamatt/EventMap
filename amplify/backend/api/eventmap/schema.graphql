type Name {
  fi: String!
  en: String
  sv: String
  jp: String
  es: String
    de: String
}

type Description {
  fi: String!
  en: String
  sv: String
  jp: String
  es: String
  de: String
}


type Location {
  lat: Float!
  lon: Float!
  streetAddress: String
  postalCode: String
  city: String
  country: String
}

type Event @model @auth(rules: [{allow: owner},  
 {allow: groups, groups: ["Admin"]},  
 {allow: groups, groups: ["DefaultUser"], operations: [read]},
 {allow: public, provider: iam operations: [read]}]) {
  id: ID!
  startingDateTime: String! @index(name: "byStartingDateTimeAndEndingDateTime", sortKeyFields: ["endingDateTime"], queryField: "eventByDates")
  endingDateTime: String!
  location: Location!
  category: [CATEGORY!] 
  company: Company
  eventPictures: [String]
  Descriptions: Description!
  name: Name!
  Links: Links
  source: String
  website: String
  updated_at_Source: AWSDateTime
  attendees: Int
  ageRestriction: String
  isFree: Boolean
  Ticket: [Ticket] @hasMany
  
  

}

type Ticket @model @auth(rules: [{allow: owner},  
{allow: groups, groups: ["Admin"]}, 
 {allow: groups, groups: ["DefaultUser"], operations: [read]},
 {allow: public, provider: iam operations: [read]}]) {
    name: String
    price: Float
    currency: String
    description: String
    available: String
    startSaleDate: String
    endSaleDate: String
    type: String
}


type Company @model @auth(rules: [{allow: owner},  
{allow: groups, groups: ["Admin"]}, 
 {allow: groups, groups: ["DefaultUser"], operations: [read]},
 {allow: public, provider: iam operations: [read]}]) {
  businessId: ID! @primaryKey
  email: String
  industry: String
  phone: String
  name: String
  website: String
  activities: [Activity] @hasMany
  events: [Event] @hasMany
}




type User @model @auth(rules: [{allow: owner},  
 {allow: groups, groups: ["DefaultUser"], operations: [read]},
 {allow: groups, groups: ["Admin"]},
 {allow: public, provider: iam operations: [read]}]) {
  id: ID!
  name: String!
  email: String! 
  profilePicture: String
  birthday: AWSDate
  friends: [User] @hasMany
  favouriteEvents: [Event] @hasMany
  favouriteActivities: [Activity] @hasMany
  favouriteCompanies: [Company] @hasMany
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])
}

type Activity @model @auth(rules: [{allow: owner},  
 {allow: groups, groups: ["DefaultUser"], operations: [read]},
 {allow: groups, groups: ["Admin"]},
 {allow: public, provider: iam operations: [read]}]) {
  id: ID!
  company: Company
  duration: String
  durationType: String
  categories: [CATEGORY!] 
  Location: Location!
  activityPictures: [String]
  Descriptions: Description!
  Names: Name!
  Links: Links
  source: String
  updated_at_Source: AWSDateTime
  OpenDays: [OpenDays!] ## 
  availableDays: [Int]  # TODO ADD CUSTOM RESOLVER (?)
  availableMonths: [Int]##
  raiting: Float
  user_raitings_total: Int
  ageRestriction: String
  Ticket: [Ticket] @hasMany
  isFree: Boolean
  priceRange: Float
}

type OpenDays {
  day: Int
  timeFrom: AWSTime
  timeTo: AWSTime
}


type Links {
  eventURL: AWSURL
  otherURL: AWSURL
  storeURL: AWSURL
    facebookURL: AWSURL
    twitterURL: AWSURL
    instagramURL: AWSURL
    youtubeURL: AWSURL
}

enum CATEGORY {
  MUSIC
  FESTIVAL
  SPORT
  PARTIESNIGHTLIFE
  KIDS
  FAMILY
  HEALTH
  TRIP
  FOOD
  WORKSHOP
  COOKING
  BUSINESS
  ACTIVITY
  CULTURE
  COMEDY
  CONCERT
  PERFORMANCE
  FINEARTS
  THEATRE
  LITERATURE
  PHOTOGRAPHY
  TECHNOLOGY
  MARKET
  SIGHTSEEING
  MUSEUM
  OTHER
  ACCOMMODATION
  NATURE
  MOTORSPORTS
  LUXURY
  GUIDEDSERVICE
  SAUNA
  ANIMALS
  EDUCATION
  SCIENCE
  FASHION
  TOUR
  DANCE
  BOARDGAMES
  VIDEOGAMES
  GAMBLING
}