enum FORMAT {
  SEMINARTALK
  EXPO
  PERFORMANCELIVESHOW
  CLASSTRAINING
  NETWORKINGMEETING
  SOCIALGATHERING
  TOURNAMENTCOMPETITION
  TOURSWALKS
  CAMPTRIP
  EXHIBITION
  OTHER
}

enum CATEGORY {
  MUSIC
  FESTIVAL
  PARTIESNIGHTLIFE
  SPORT
  KIDS
  HEALTH
  TRIP
  WORKSHOP
  COOKING
  BUSINESS
  ACTIVITY
  CULTURE
  COMEDY
  CONCERT
  PERFORMANCE
  FINEARTS
  THEATRE
  LITERATURE
  PHOTOGRAPHY
  TECHNOLOGY
  OTHER
}

type Category @model   @auth(rules: [
    # Defaults to use the "owner" field.
    { allow: owner, operations: [create, read, update, delete] },

    # Admin users can access any operation.
    { allow: groups, groups: ["Admin"] }

    # Each record may specify which groups may read them.
    { allow: public, operations: [read] }
  ]) {
  id: ID!
  category: [CATEGORY!]
  format: [FORMAT]
  tags: [String]
}

type EventImage @model @auth(rules: [
    # Defaults to use the "owner" field.
    { allow: owner, operations: [create, read, update, delete] },

    # Admin users can access any operation.
    { allow: groups, groups: ["Admin"] }

    # Each record may specify which groups may read them.
    { allow: public, operations: [read] }
  ]) {
  id: ID!
  url: AWSURL!
  lisenceType: Int
  lisenceName: String
  eventID: ID! @index(name: "byEvent")
}

type Location @model @auth(rules: [
    # Defaults to use the "owner" field.
    { allow: owner, operations: [create, read, update, delete] },

    # Admin users can access any operation.
    { allow: groups, groups: ["Admin"] }

    # Each record may specify which groups may read them.
    { allow: public, operations: [read] }
  ]) {
  id: ID!
  lat: Float!
  lon: Float!
  streetAddess: String!
  postalCode: Int
}

type Event @model @auth(rules: [
    # Defaults to use the "owner" field.
    { allow: owner, operations: [create, read, update, delete] },

    # Admin users can access any operation.
    { allow: groups, groups: ["Admin"] }

    # Each record may specify which groups may read them.
    { allow: public, operations: [read] }
  ]) {
  id: ID!
  title: String!
  infoUrl: String
  intro: String
  description: String!
  startingDatetime: AWSDateTime!
  endingDatetime: AWSDateTime!
  Location: Location @hasOne
  Category: Category @hasOne
  source: String!
  EventImage: [EventImage] @hasMany(indexName: "byEvent", fields: ["id"])
}